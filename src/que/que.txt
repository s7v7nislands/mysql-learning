/* Pseudotype for all graph nodes */
typedef void    que_node_t;            

typedef struct que_fork_struct  que_fork_t;

/* Query graph root is a fork node */
typedef que_fork_t      que_t;

typedef struct que_thr_struct           que_thr_t;
typedef struct que_common_struct        que_common_t;

/* Common struct at the beginning of each query graph node; the name of this
substruct must be 'common' */

struct que_common_struct{
        ulint           type;   /* query node type */
        que_node_t*     parent; /* back pointer to parent node, or NULL */
        que_node_t*     brother;/* pointer to a possible brother node */
        dfield_t        val;    /* evaluated value for an expression */
        ulint           val_buf_size;
                                /* buffer size for the evaluated value data,
                                if the buffer has been allocated dynamically:
                                if this field is != 0, and the node is a
                                symbol node or a function node, then we
                                have to free the data field in val
                                explicitly */
};



/* Query graph query thread node: the fields are protected by the kernel
mutex with the exceptions named below */

struct que_thr_struct{
        que_common_t    common;         /* type: QUE_NODE_THR */
        ulint           magic_n;        /* magic number to catch memory
                                        corruption */
        que_node_t*     child;          /* graph child node */
        que_t*          graph;          /* graph where this node belongs */
        ibool           is_active;      /* TRUE if the thread has been set
                                        to the run state in
                                        que_thr_move_to_run_state, but not
                                        deactivated in
                                        que_thr_dec_reference_count */
        ulint           state;          /* state of the query thread */
        UT_LIST_NODE_T(que_thr_t)
                        thrs;           /* list of thread nodes of the fork
                                        node */
        UT_LIST_NODE_T(que_thr_t)
                        trx_thrs;       /* lists of threads in wait list of
                                        the trx */
        UT_LIST_NODE_T(que_thr_t)
                        queue;          /* list of runnable thread nodes in
                                        the server task queue */
        /*------------------------------*/
        /* The following fields are private to the OS thread executing the
        query thread, and are not protected by the kernel mutex: */

        que_node_t*     run_node;       /* pointer to the node where the
                                        subgraph down from this node is
                                        currently executed */
        que_node_t*     prev_node;      /* pointer to the node from which
                                        the control came */
        ulint           resource;       /* resource usage of the query thread
                                        thus far */
        ulint           lock_state;     /* lock state of thread (table or
                                        row) */
};


#define QUE_THR_MAGIC_N         8476583
#define QUE_THR_MAGIC_FREED     123461526

/* Query graph fork node: its fields are protected by the kernel mutex */
struct que_fork_struct{
        que_common_t    common;         /* type: QUE_NODE_FORK */
        que_t*          graph;          /* query graph of this node */
        ulint           fork_type;      /* fork type */
        ulint           n_active_thrs;  /* if this is the root of a graph, the
                                        number query threads that have been
                                        started in que_thr_move_to_run_state
                                        but for which que_thr_dec_refer_count
                                        has not yet been called */
        trx_t*          trx;            /* transaction: this is set only in
                                        the root node */
        ulint           state;          /* state of the fork node */
        que_thr_t*      caller;         /* pointer to a possible calling query
                                        thread */
        UT_LIST_BASE_NODE_T(que_thr_t)
                        thrs;           /* list of query threads */
        /*------------------------------*/
        /* The fields in this section are defined only in the root node */
        sym_tab_t*      sym_tab;        /* symbol table of the query,
                                        generated by the parser, or NULL
                                        if the graph was created 'by hand' */
        pars_info_t*    info;           /* in: info struct, or NULL */
        /* The following cur_... fields are relevant only in a select graph */

        ulint           cur_end;        /* QUE_CUR_NOT_DEFINED, QUE_CUR_START,
                                        QUE_CUR_END */
        ulint           cur_pos;        /* if there are n rows in the result
                                        set, values 0 and n + 1 mean before
                                        first row, or after last row, depending
                                        on cur_end; values 1...n mean a row
                                        index */
        ibool           cur_on_row;     /* TRUE if cursor is on a row, i.e.,
                                        it is not before the first row or
                                        after the last row */
        dulint          n_inserts;      /* number of rows inserted */
        dulint          n_updates;      /* number of rows updated */
        dulint          n_deletes;      /* number of rows deleted */
        sel_node_t*     last_sel_node;  /* last executed select node, or NULL
                                        if none */
        UT_LIST_NODE_T(que_fork_t)
                        graphs;         /* list of query graphs of a session
                                        or a stored procedure */
        /*------------------------------*/
        mem_heap_t*     heap;           /* memory heap where the fork was
                                        created */

};

/* Query fork (or graph) types */
#define QUE_FORK_SELECT_NON_SCROLL      1       /* forward-only cursor */
#define QUE_FORK_SELECT_SCROLL          2       /* scrollable cursor */
#define QUE_FORK_INSERT                 3
#define QUE_FORK_UPDATE                 4
#define QUE_FORK_ROLLBACK               5
                        /* This is really the undo graph used in rollback,
                        no signal-sending roll_node in this graph */
#define QUE_FORK_PURGE                  6
#define QUE_FORK_EXECUTE                7
#define QUE_FORK_PROCEDURE              8
#define QUE_FORK_PROCEDURE_CALL         9
#define QUE_FORK_MYSQL_INTERFACE        10
#define QUE_FORK_RECOVERY               11

/* Query fork (or graph) states */
#define QUE_FORK_ACTIVE         1
#define QUE_FORK_COMMAND_WAIT   2
#define QUE_FORK_INVALID        3
#define QUE_FORK_BEING_FREED    4

/* Flag which is ORed to control structure statement node types */
#define QUE_NODE_CONTROL_STAT   1024
/* Query graph node types */
#define QUE_NODE_LOCK           1
#define QUE_NODE_INSERT         2
#define QUE_NODE_UPDATE         4
#define QUE_NODE_CURSOR         5
#define QUE_NODE_SELECT         6
#define QUE_NODE_AGGREGATE      7
#define QUE_NODE_FORK           8
#define QUE_NODE_THR            9
#define QUE_NODE_UNDO           10
#define QUE_NODE_COMMIT         11
#define QUE_NODE_ROLLBACK       12
#define QUE_NODE_PURGE          13
#define QUE_NODE_CREATE_TABLE   14
#define QUE_NODE_CREATE_INDEX   15
#define QUE_NODE_SYMBOL         16
#define QUE_NODE_RES_WORD       17
#define QUE_NODE_FUNC           18
#define QUE_NODE_ORDER          19
#define QUE_NODE_PROC           (20 + QUE_NODE_CONTROL_STAT)
#define QUE_NODE_IF             (21 + QUE_NODE_CONTROL_STAT)
#define QUE_NODE_WHILE          (22 + QUE_NODE_CONTROL_STAT)
#define QUE_NODE_ASSIGNMENT     23
#define QUE_NODE_FETCH          24
#define QUE_NODE_OPEN           25
#define QUE_NODE_COL_ASSIGNMENT 26
#define QUE_NODE_FOR            (27 + QUE_NODE_CONTROL_STAT)
#define QUE_NODE_RETURN         28
#define QUE_NODE_ROW_PRINTF     29
#define QUE_NODE_ELSIF          30
#define QUE_NODE_CALL           31
#define QUE_NODE_EXIT           32

/* Query thread states */
#define QUE_THR_RUNNING         1
#define QUE_THR_PROCEDURE_WAIT  2
#define QUE_THR_COMPLETED       3       /* in selects this means that the
                                        thread is at the end of its result set
                                        (or start, in case of a scroll cursor);
                                        in other statements, this means the
                                        thread has done its task */
#define QUE_THR_COMMAND_WAIT    4
#define QUE_THR_LOCK_WAIT       5
#define QUE_THR_SIG_REPLY_WAIT  6
#define QUE_THR_SUSPENDED       7
#define QUE_THR_ERROR           8

/* Query thread lock states */
#define QUE_THR_LOCK_NOLOCK     0
#define QUE_THR_LOCK_ROW        1
#define QUE_THR_LOCK_TABLE      2

/* From where the cursor position is counted */
#define QUE_CUR_NOT_DEFINED     1
#define QUE_CUR_START           2
#define QUE_CUR_END             3



note：
很多代码都未使用。
基本结构如下：

que_fork_t  
    |
    |
	-> que_thr_t -> que_thr_t
	      |
		  |
		  |
		  |
	      -> que_node_t -> que_node_t
	             |
				 |
				 |
				 -> que_node_t
				 
				 
/* Short introduction to query graphs
   ==================================

A query graph consists of nodes linked to each other in various ways. The
execution starts at que_run_threads() which takes a que_thr_t parameter.
que_thr_t contains two fields that control query graph execution: run_node
and prev_node. run_node is the next node to execute and prev_node is the
last node executed.           

Each node has a pointer to a 'next' statement, i.e., its brother, and a
pointer to its parent node. The next pointer is NULL in the last statement
of a block.

Loop nodes contain a link to the first statement of the enclosed statement
list. While the loop runs, que_thr_step() checks if execution to the loop
node came from its parent or from one of the statement nodes in the loop. If
it came from the parent of the loop node it starts executing the first
statement node in the loop. If it came from one of the statement nodes in
the loop, then it checks if the statement node has another statement node
following it, and runs it if so.

To signify loop ending, the loop statements (see e.g. while_step()) set
que_thr_t->run_node to the loop node's parent node. This is noticed on the
next call of que_thr_step() and execution proceeds to the node pointed to by
the loop node's 'next' pointer.

For example, the code:

X := 1;
WHILE X < 5 LOOP
 X := X + 1;
 X := X + 1;
X := 5

will result in the following node hierarchy, with the X-axis indicating
'next' links and the Y-axis indicating parent/child links:

A - W - A
    |
    |
    A - A

A = assign_node_t, W = while_node_t. */

/* How a stored procedure containing COMMIT or ROLLBACK commands
is executed?

The commit or rollback can be seen as a subprocedure call.
The problem is that if there are several query threads
currently running within the transaction, their action could
mess the commit or rollback operation. Or, at the least, the
operation would be difficult to visualize and keep in control.

Therefore the query thread requesting a commit or a rollback
sends to the transaction a signal, which moves the transaction
to TRX_QUE_SIGNALED state. All running query threads of the
transaction will eventually notice that the transaction is now in
this state and voluntarily suspend themselves. Only the last
query thread which suspends itself will trigger handling of
the signal.

When the transaction starts to handle a rollback or commit
signal, it builds a query graph which, when executed, will
roll back or commit the incomplete transaction. The transaction
is moved to the TRX_QUE_ROLLING_BACK or TRX_QUE_COMMITTING state.
If specified, the SQL cursors opened by the transaction are closed.
When the execution of the graph completes, it is like returning
from a subprocedure: the query thread which requested the operation
starts running again. */

	
	