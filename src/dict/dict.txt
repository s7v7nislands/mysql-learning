include/dict0boot.h

/* Space id and page no where the dictionary header resides */
#define DICT_HDR_SPACE      0                       /* the SYSTEM tablespace */
#define DICT_HDR_PAGE_NO    FSP_DICT_HDR_PAGE_NO

/* The ids for the basic system tables and their indexes */
#define DICT_TABLES_ID      ut_dulint_create(0, 1)
#define DICT_COLUMNS_ID     ut_dulint_create(0, 2)
#define DICT_INDEXES_ID     ut_dulint_create(0, 3)
#define DICT_FIELDS_ID      ut_dulint_create(0, 4)
/* The following is a secondary index on SYS_TABLES */
#define DICT_TABLE_IDS_ID   ut_dulint_create(0, 5)

#define DICT_HDR_FIRST_ID   10                      /* the ids for tables etc. start from this number, except for basic system tables and their above defined indexes; ibuf tables and indexes are assigned as the id the number DICT_IBUF_ID_MIN plus the space id */
#define DICT_IBUF_ID_MIN    ut_dulint_create(0xFFFFFFFFUL, 0)

/* The offset of the dictionary header on the page */
#define DICT_HDR        FSEG_PAGE_DATA

/*-------------------------------------------------------------*/
/* Dictionary header offsets */
#define DICT_HDR_ROW_ID     0   /* The latest assigned row id */
#define DICT_HDR_TABLE_ID   8   /* The latest assigned table id */
#define DICT_HDR_INDEX_ID   16  /* The latest assigned index id */
#define DICT_HDR_MIX_ID     24  /* Obsolete, always 0. */ /* in fact, always DICT_HDR_FIRST_ID */
#define DICT_HDR_TABLES     32  /* Root of the table index tree */
#define DICT_HDR_TABLE_IDS  36  /* Root of the table index tree */
#define DICT_HDR_COLUMNS    40  /* Root of the column index tree */
#define DICT_HDR_INDEXES    44  /* Root of the index index tree */
#define DICT_HDR_FIELDS     48  /* Root of the index field index tree */

#define DICT_HDR_FSEG_HEADER    56  /* Segment header for the tablespace segment into which the dictionary header is created */

/*-------------------------------------------------------------*/

/* The field number of the page number field in the sys_indexes table clustered index */
#define DICT_SYS_INDEXES_PAGE_NO_FIELD      8
#define DICT_SYS_INDEXES_SPACE_NO_FIELD     7
#define DICT_SYS_INDEXES_TYPE_FIELD         6


/* When a row id which is zero modulo this number (which must be a power of two) is assigned, the field DICT_HDR_ROW_ID on the dictionary header page is updated */
#define DICT_HDR_ROW_ID_WRITE_MARGIN    256
 

include/dict0crea.h
这个文件包括了，create table是执行中的数据结构。在innodb中所以的sql语句都会解析成graph node，然后执行这些node。
/* Table create node structure */

struct tab_node_struct{
    que_common_t    common;         /* node type: QUE_NODE_TABLE_CREATE */ 包含在所有的node结构体中，里面包含node的基本信息。
    dict_table_t*   table;          /* table to create, built as a memory data structure with dict_mem_... functions */
    ins_node_t*     tab_def;        /* child node which does the insert of the table definition; the row to be inserted is built by the parent node  */
    ins_node_t*     col_def;        /* child node which does the inserts of the column definitions; the row to be inserted is built by the parent node  */
    commit_node_t*  commit_node;    /* child node which performs a commit after a successful table creation */
    /*----------------------*/
    /* Local storage for this graph node */
    ulint       state;              /* node execution state */
    ulint       col_no;             /* next column definition to insert */
    mem_heap_t* heap;               /* memory heap used as auxiliary storage */
};

/* Table create node states */
#define TABLE_BUILD_TABLE_DEF   1
#define TABLE_BUILD_COL_DEF     2
#define TABLE_COMMIT_WORK       3
#define TABLE_ADD_TO_CACHE      4
#define TABLE_COMPLETED         5


/* Index create node struct */

struct ind_node_struct{
    que_common_t    common;         /* node type: QUE_NODE_INDEX_CREATE */
    dict_index_t*   index;          /* index to create, built as a memory data structure with dict_mem_... functions */
    ins_node_t*     ind_def;        /* child node which does the insert of the index definition; the row to be inserted is built by the parent node  */
    ins_node_t*     field_def;      /* child node which does the inserts of the field definitions; the row to be inserted is built by the parent node  */
    commit_node_t*  commit_node;    /* child node which performs a commit after a successful index creation */
    /*----------------------*/
    /* Local storage for this graph node */
    ulint           state;      /* node execution state */
    ulint           page_no;    /* root page number of the index */
    dict_table_t*   table;      /* table which owns the index */
    dtuple_t*       ind_row;    /* index definition row built */
    ulint           field_no;   /* next field definition to insert */
    mem_heap_t*     heap;       /* memory heap used as auxiliary storage */
};

/* Index create node states */
#define INDEX_BUILD_INDEX_DEF   1
#define INDEX_BUILD_FIELD_DEF   2
#define INDEX_CREATE_INDEX_TREE 3
#define INDEX_COMMIT_WORK       4
#define INDEX_ADD_TO_CACHE      5

include/dict0mem.h

/* Type flags of an index: OR'ing of the flags is allowed to define a combination of types */
#define DICT_CLUSTERED  1   /* clustered index */
#define DICT_UNIQUE     2   /* unique index */
#define DICT_UNIVERSAL  4   /* index which can contain records from any other index */
#define DICT_IBUF       8   /* insert buffer tree */

/* Types for a table object */
#define DICT_TABLE_ORDINARY         1
#if 0   /* not implemented */
#define DICT_TABLE_CLUSTER_MEMBER   2
#define DICT_TABLE_CLUSTER          3 /* this means that the table is really a cluster definition */
#endif

/* Table flags */
#define DICT_TF_COMPACT             1   /* compact page format */ 

/* Data structure for a column in a table */
struct dict_col_struct{
    /*----------------------*/
    /* The following are copied from dtype_t, so that all bit-fields can be packed tightly. */
    unsigned    mtype:8;    /* main data type */
    unsigned    prtype:24;  /* precise type; MySQL data type, charset code, flags to indicate nullability, signedness, whether this is a binary string, whether this is a true VARCHAR where MySQL uses 2 bytes to store the length */

    /* the remaining fields do not affect alphabetical ordering: */

    unsigned    len:16;     /* length; for MySQL data this is field->pack_length(), except that for a >= 5.0.3 type true VARCHAR this is the maximum byte length of the string data (in addition to the string, MySQL uses 1 or 2 bytes to store the string length) */

    unsigned    mbminlen:2; /* minimum length of a character, in bytes */
    unsigned    mbmaxlen:3; /* maximum length of a character, in bytes */
    /*----------------------*/
    /* End of definitions copied from dtype_t */

    unsigned    ind:10;     /* table column position (starting from 0) */
    unsigned    ord_part:1; /* nonzero if this column appears in the ordering fields of an index */ 列是否出现在index中，不包括prefix情况。
};

/* DICT_MAX_INDEX_COL_LEN is measured in bytes and is the maximum
indexed column length (or indexed prefix length). It is set to 3*256,
so that one can create a column prefix index on 256 characters of a
TEXT or VARCHAR column also in the UTF-8 charset. In that charset,
a character may take at most 3 bytes.
This constant MUST NOT BE CHANGED, or the compatibility of InnoDB data
files would be at risk! */

#define DICT_MAX_INDEX_COL_LEN      768

/* Data structure for a field in an index */
struct dict_field_struct{
    dict_col_t* col;        /* pointer to the table column */
    const char* name;       /* name of the column */
    unsigned    prefix_len:10;  /* 0 or the length of the column prefix in bytes in a MySQL index of type, e.g., INDEX (textcol(25)); must be smaller than DICT_MAX_INDEX_COL_LEN; NOTE that in the UTF-8 charset, MySQL sets this to 3 * the prefix len in UTF-8 chars */
    unsigned    fixed_len:10;   /* 0 or the fixed length of the column if smaller than DICT_MAX_INDEX_COL_LEN */
};

/* Data structure for an index */
struct dict_index_struct{
    dulint          id;         /* id of the index */
    mem_heap_t*     heap;       /* memory heap */
    ulint           type;       /* index type */
    const char*     name;       /* index name */
    const char*     table_name; /* table name */
    dict_table_t*   table;      /* back pointer to table */
    unsigned        space:32;   /* space where the index tree is placed */
    unsigned        page:32;    /* index tree root page number */
    unsigned        trx_id_offset:10;       /* position of the the trx id column in a clustered index record, if the fields before it are known to be of a fixed size, 0 otherwise */
    unsigned        n_user_defined_cols:10; /* number of columns the user defined to be in the index: in the internal representation we add more columns */
    unsigned        n_uniq:10;              /* number of fields from the beginning which are enough to determine an index entry uniquely */
    unsigned        n_def:10;               /* number of fields defined so far */
    unsigned        n_fields:10;            /* number of fields in the index */
    unsigned        n_nullable:10;          /* number of nullable fields */
    unsigned        cached:1;               /* TRUE if the index object is in the dictionary cache */
    dict_field_t*   fields;                 /* array of field descriptions */
    UT_LIST_NODE_T(dict_index_t) indexes;   /* list of indexes of the table */
    btr_search_t*   search_info;            /* info used in optimistic searches */
    /*----------------------*/
    ib_longlong*    stat_n_diff_key_vals;   /* approximate number of different key values for this index, for each n-column prefix where n <= dict_get_n_unique(index); we periodically calculate new estimates */
    ulint           stat_index_size;        /* approximate index size in database pages */
    ulint           stat_n_leaf_pages;      /* approximate number of leaf pages in the index tree */
    rw_lock_t       lock;                   /* read-write lock protecting the upper levels of the index tree */
#ifdef UNIV_DEBUG
    ulint           magic_n;                /* magic number */
# define DICT_INDEX_MAGIC_N 76789786
#endif
};

/* Data structure for a foreign key constraint; an example:
FOREIGN KEY (A, B) REFERENCES TABLE2 (C, D) */

struct dict_foreign_struct{
    mem_heap_t*     heap;                   /* this object is allocated from this memory heap */
    char*           id;                     /* id of the constraint as a null-terminated string */
    unsigned        n_fields:10;            /* number of indexes' first fields for which the the foreign key constraint is defined: we allow the indexes to contain more fields than mentioned in the constraint, as long as the first fields are as mentioned */
    unsigned        type:6;                 /* 0 or DICT_FOREIGN_ON_DELETE_CASCADE or DICT_FOREIGN_ON_DELETE_SET_NULL */
    char*           foreign_table_name;     /* foreign table name */
    dict_table_t*   foreign_table;          /* table where the foreign key is */
    const char**    foreign_col_names;      /* names of the columns in the foreign key */
    char*           referenced_table_name;  /* referenced table name */
    dict_table_t*   referenced_table;       /* table where the referenced key is */
    const char**    referenced_col_names;   /* names of the referenced columns in the referenced table */
    dict_index_t*   foreign_index;          /* foreign index; we require that both tables contain explicitly defined indexes for the constraint: InnoDB does not generate new indexes implicitly */
    dict_index_t*   referenced_index;       /* referenced index */
    UT_LIST_NODE_T(dict_foreign_t)  foreign_list;       /* list node for foreign keys of the table */
    UT_LIST_NODE_T(dict_foreign_t)  referenced_list;    /* list node for referenced keys of the table */
};

/* The flags for ON_UPDATE and ON_DELETE can be ORed; the default is that
a foreign key constraint is enforced, therefore RESTRICT just means no flag */
#define DICT_FOREIGN_ON_DELETE_CASCADE      1
#define DICT_FOREIGN_ON_DELETE_SET_NULL     2
#define DICT_FOREIGN_ON_UPDATE_CASCADE      4
#define DICT_FOREIGN_ON_UPDATE_SET_NULL     8
#define DICT_FOREIGN_ON_DELETE_NO_ACTION    16
#define DICT_FOREIGN_ON_UPDATE_NO_ACTION    32


/* Data structure for a database table */
struct dict_table_struct{
    dulint      id;     /* id of the table */
    mem_heap_t* heap;   /* memory heap */
    const char* name;   /* table name */
    const char* dir_path_of_temp_table;     /* NULL or the directory path where a TEMPORARY table that was explicitly created by a user should be placed if innodb_file_per_table is defined in my.cnf; in Unix this is usually /tmp/..., in Windows \temp\... */
    unsigned    space:32;                   /* space where the clustered index of the table is placed */
    unsigned    ibd_file_missing:1;         /* TRUE if this is in a single-table tablespace and the .ibd file is missing; then we must return in ha_innodb.cc an error if the user tries to query such an orphaned table */
    unsigned    tablespace_discarded:1;     /* this flag is set TRUE when the user calls DISCARD TABLESPACE on this table, and reset to FALSE in IMPORT TABLESPACE */
    unsigned    cached:1;                   /* TRUE if the table object has been added to the dictionary cache */
    unsigned    flags:8;                    /* DICT_TF_COMPACT, ... */
    unsigned    n_def:10;                   /* number of columns defined so far */
    unsigned    n_cols:10;                  /* number of columns */
    dict_col_t* cols;                       /* array of column descriptions */
    const char* col_names;                  /* Column names packed in a character string "name1\0name2\0...nameN\0".  Until the string contains n_cols, it will be allocated from a temporary heap.  The final string will be allocated from table->heap. */
    hash_node_t name_hash;                  /* hash chain node */
    hash_node_t id_hash;                    /* hash chain node */
    UT_LIST_BASE_NODE_T(dict_index_t)   indexes;            /* list of indexes of the table */
    UT_LIST_BASE_NODE_T(dict_foreign_t) foreign_list;       /* list of foreign key constraints in the table; these refer to columns in other tables */
    UT_LIST_BASE_NODE_T(dict_foreign_t) referenced_list;    /* list of foreign key constraints which refer to this table */
    UT_LIST_NODE_T(dict_table_t)        table_LRU;          /* node of the LRU list of tables */
    ulint       n_mysql_handles_opened;         /* count of how many handles MySQL has opened to this table; dropping of the table is NOT allowed until this count gets to zero; MySQL does NOT itself check the number of open handles at drop */
    ulint       n_foreign_key_checks_running;   /* count of how many foreign key check operations are currently being performed on the table: we cannot drop the table while there are foreign key checks running on it! */
    lock_t*     auto_inc_lock;                  /* a buffer for an auto-inc lock for this table: we allocate the memory here so that individual transactions can get it and release it without a need to allocate space from the lock heap of the trx: otherwise the lock heap would grow rapidly if we do a large insert from a select */
    dulint      query_cache_inv_trx_id;         /* transactions whose trx id < than this number are not allowed to store to the MySQL query cache or retrieve from it; when a trx with undo logs commits, it sets this to the value of the trx id counter for the tables it had an IX lock on */
    UT_LIST_BASE_NODE_T(lock_t)locks;           /* list of locks on the table */
#ifdef UNIV_DEBUG
    /*----------------------*/
    ibool       does_not_fit_in_memory;         /* this field is used to specify in simulations tables which are so big that disk should be accessed: disk access is simulated by putting the thread to sleep for a while; NOTE that this flag is not stored to the data dictionary on disk, and the database will forget about value TRUE if it has to reload the table definition from disk */
#endif /* UNIV_DEBUG */
    /*----------------------*/
    unsigned    big_rows:1;                     /* flag: TRUE if the maximum length of a single row exceeds BIG_ROW_SIZE; initialized in dict_table_add_to_cache() */
    unsigned    stat_initialized:1;             /* TRUE if statistics have been calculated the first time after database startup or table creation */
    ib_longlong stat_n_rows;                    /* approximate number of rows in the table; we periodically calculate new estimates */
    ulint       stat_clustered_index_size;      /* approximate clustered index size in database pages */
    ulint       stat_sum_of_other_index_sizes;  /* other indexes in database pages */
    ulint       stat_modified_counter;          /* when a row is inserted, updated, or deleted, we add 1 to this number; we calculate new estimates for the stat_... values for the table and the indexes at an interval of 2 GB or when about 1 / 16 of table has been modified; also when the estimate operation is called for MySQL SHOW TABLE STATUS; the counter is reset to zero at statistics calculation; this counter is not protected by any latch, because this is only used for heuristics */
    /*----------------------*/
    mutex_t         autoinc_mutex;              /* mutex protecting the autoincrement counter */
    ibool           autoinc_inited;             /* TRUE if the autoinc counter has been inited; MySQL gets the init value by executing SELECT MAX(auto inc column) */
    ib_ulonglong    autoinc;                    /* autoinc counter value to give to the next inserted row */
    ib_longlong     autoinc_increment;          /* The increment step of the auto increment column. Value must be greater than or equal to 1 */
    ulong           n_waiting_or_granted_auto_inc_locks;    /* This counter is used to track the number of granted and pending autoinc locks on this table. This value is set after acquiring the kernel mutex but we peek the contents to determine whether other transactions have acquired the AUTOINC lock or not. Of course only one transaction can be granted the lock but there can be multiple waiters. */

#ifdef UNIV_DEBUG
    ulint       magic_n;/* magic number */
# define DICT_TABLE_MAGIC_N 76333786
#endif /* UNIV_DEBUG */
};


notes:
1. n_def: 表示目前已经往table中添加的col
2. n_cols: 表示这个表总共定义的col数量，包括了DATA_N_SYS_COLS

include/dict0dict.h
内存中系统目录结构
/* Dictionary system struct */
struct dict_sys_struct{
    mutex_t             mutex;          /* mutex protecting the data dictionary; protects also the disk-based dictionary system tables; this mutex serializes CREATE TABLE and DROP TABLE, as well as reading the dictionary data for a table from system tables */
    dulint              row_id;         /* the next row id to assign; NOTE that at a checkpoint this must be written to the dict system header and flushed to a file; in recovery this must be derived from the log records */
    hash_table_t*       table_hash;     /* hash table of the tables, based on name */
    hash_table_t*       table_id_hash;  /* hash table of the tables, based on id */
    UT_LIST_BASE_NODE_T(dict_table_t)   table_LRU;      /* LRU list of tables */
    ulint               size;               /* varying space in bytes occupied by the data dictionary table and index objects */
    dict_table_t*       sys_tables;         /* SYS_TABLES table */
    dict_table_t*       sys_columns;        /* SYS_COLUMNS table */
    dict_table_t*       sys_indexes;        /* SYS_INDEXES table */
    dict_table_t*       sys_fields;         /* SYS_FIELDS table */
};




system table table structure:
1.  SYS_TABLES
    dict_mem_table_create("SYS_TABLES", DICT_HDR_SPACE, 8, 0);
    dict_mem_table_add_col(table, heap, "NAME", DATA_BINARY, 0, 0);
    dict_mem_table_add_col(table, heap, "ID", DATA_BINARY, 0, 0);
    dict_mem_table_add_col(table, heap, "N_COLS", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "TYPE", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "MIX_ID", DATA_BINARY, 0, 0);
    dict_mem_table_add_col(table, heap, "MIX_LEN", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "CLUSTER_NAME", DATA_BINARY, 0, 0);
    dict_mem_table_add_col(table, heap, "SPACE", DATA_INT, 0, 4);
    
    dict_mem_index_create("SYS_TABLES", "CLUST_IND", DICT_HDR_SPACE, DICT_UNIQUE | DICT_CLUSTERED, 1);
    dict_mem_index_add_field(index, "NAME", 0);
    
    dict_mem_index_create("SYS_TABLES", "ID_IND", DICT_HDR_SPACE, DICT_UNIQUE, 1);
    dict_mem_index_add_field(index, "ID", 0);

2.  SYS_COLUMNS
    dict_mem_table_create("SYS_COLUMNS", DICT_HDR_SPACE, 7, 0);
    dict_mem_table_add_col(table, heap, "TABLE_ID", DATA_BINARY, 0, 0);
    dict_mem_table_add_col(table, heap, "POS", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "NAME", DATA_BINARY, 0, 0);
    dict_mem_table_add_col(table, heap, "MTYPE", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "PRTYPE", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "LEN", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "PREC", DATA_INT, 0, 4);    

    dict_mem_index_create("SYS_COLUMNS", "CLUST_IND", DICT_HDR_SPACE, DICT_UNIQUE | DICT_CLUSTERED, 2);
    dict_mem_index_add_field(index, "TABLE_ID", 0);
    dict_mem_index_add_field(index, "POS", 0);

3.  SYS_INDEXES
    dict_mem_table_create("SYS_INDEXES", DICT_HDR_SPACE, 7, 0);
    dict_mem_table_add_col(table, heap, "TABLE_ID", DATA_BINARY, 0, 0);
    dict_mem_table_add_col(table, heap, "ID", DATA_BINARY, 0, 0);
    dict_mem_table_add_col(table, heap, "NAME", DATA_BINARY, 0, 0);
    dict_mem_table_add_col(table, heap, "N_FIELDS", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "TYPE", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "SPACE", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "PAGE_NO", DATA_INT, 0, 4);
 
    dict_mem_index_create("SYS_INDEXES", "CLUST_IND", DICT_HDR_SPACE, DICT_UNIQUE | DICT_CLUSTERED, 2);
    dict_mem_index_add_field(index, "TABLE_ID", 0);
    dict_mem_index_add_field(index, "ID", 0);

4.  SYS_FIELDS
    table = dict_mem_table_create("SYS_FIELDS", DICT_HDR_SPACE, 3, 0);
    dict_mem_table_add_col(table, heap, "INDEX_ID", DATA_BINARY, 0, 0);
    dict_mem_table_add_col(table, heap, "POS", DATA_INT, 0, 4);
    dict_mem_table_add_col(table, heap, "COL_NAME", DATA_BINARY, 0, 0);
    
    dict_mem_index_create("SYS_FIELDS", "CLUST_IND", DICT_HDR_SPACE, DICT_UNIQUE | DICT_CLUSTERED, 2);
    dict_mem_index_add_field(index, "INDEX_ID", 0);
    dict_mem_index_add_field(index, "POS", 0);




note:
1. the system table record format is old, not impact.
2. table load到内存的时候，才会给table加上系统列。dict_table_add_system_columns()
3. index也是，在load到内存的时候会再次修改. 之前只有定义的索引列。dict_index_build_internal_clust(),dict_index_build_internal_non_clust()
4. dict_index_build_node_ptr()构造内部节点
   





