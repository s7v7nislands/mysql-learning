extern ulint    data_mysql_default_charset_coll;
#define DATA_MYSQL_LATIN1_SWEDISH_CHARSET_COLL 8
#define DATA_MYSQL_BINARY_CHARSET_COLL 63

/* SQL data type struct */
typedef struct dtype_struct             dtype_t;

/*-------------------------------------------*/
/* The 'MAIN TYPE' of a column */
#define DATA_VARCHAR    1       /* character varying of the
                                latin1_swedish_ci charset-collation; note
                                that the MySQL format for this, DATA_BINARY,
                                DATA_VARMYSQL, is also affected by whether the
                                'precise type' contains
                                DATA_MYSQL_TRUE_VARCHAR */
#define DATA_CHAR       2       /* fixed length character of the
                                latin1_swedish_ci charset-collation */
#define DATA_FIXBINARY  3       /* binary string of fixed length */
#define DATA_BINARY     4       /* binary string */
#define DATA_BLOB       5       /* binary large object, or a TEXT type;
                                if prtype & DATA_BINARY_TYPE == 0, then this is
                                actually a TEXT column (or a BLOB created
                                with < 4.0.14; since column prefix indexes
                                came only in 4.0.14, the missing flag in BLOBs
                                created before that does not cause any harm) */
#define DATA_INT        6       /* integer: can be any size 1 - 8 bytes */
#define DATA_SYS_CHILD  7       /* address of the child page in node pointer */
#define DATA_SYS        8       /* system column */

/* Data types >= DATA_FLOAT must be compared using the whole field, not as
binary strings */

#define DATA_FLOAT      9
#define DATA_DOUBLE     10
#define DATA_DECIMAL    11      /* decimal number stored as an ASCII string */
#define DATA_VARMYSQL   12      /* any charset varying length char */
#define DATA_MYSQL      13      /* any charset fixed length char */
                                /* NOTE that 4.1.1 used DATA_MYSQL and
                                DATA_VARMYSQL for all character sets, and the
                                charset-collation for tables created with it
                                can also be latin1_swedish_ci */
#define DATA_MTYPE_MAX  63      /* dtype_store_for_order_and_null_size()
                                requires the values are <= 63 */
/*-------------------------------------------*/


note:
1. DATA_CHAR, DATA_VARCHAR 是DATA_MYSQL, DATA_VARMYSQL的特殊情况，即字符集为latin1_swedish_ci时。
2. DATA_BANARY, DATA_FIXBINARY 是不包括字符集的。


/* The 'PRECISE TYPE' of a column */
/*
Tables created by a MySQL user have the following convention:

- In the least significant byte in the precise type we store the MySQL type
code (not applicable for system columns).

- In the second least significant byte we OR flags DATA_NOT_NULL,
DATA_UNSIGNED, DATA_BINARY_TYPE.

- In the third least significant byte of the precise type of string types we
store the MySQL charset-collation code. In DATA_BLOB columns created with
< 4.0.14 we do not actually know if it is a BLOB or a TEXT column. Since there
are no indexes on prefixes of BLOB or TEXT columns in < 4.0.14, this is no
problem, though.

Note that versions < 4.1.2 or < 5.0.1 did not store the charset code to the
precise type, since the charset was always the default charset of the MySQL
installation. If the stored charset code is 0 in the system table SYS_COLUMNS
of InnoDB, that means that the default charset of this MySQL installation
should be used.

When loading a table definition from the system tables to the InnoDB data
dictionary cache in main memory, InnoDB versions >= 4.1.2 and >= 5.0.1 check
if the stored charset-collation is 0, and if that is the case and the type is
a non-binary string, replace that 0 by the default charset-collation code of
this MySQL installation. In short, in old tables, the charset-collation code
in the system tables on disk can be 0, but in in-memory data structures
(dtype_t), the charset-collation code is always != 0 for non-binary string
types.

In new tables, in binary string types, the charset-collation code is the
MySQL code for the 'binary charset', that is, != 0.

For binary string types and for DATA_CHAR, DATA_VARCHAR, and for those
DATA_BLOB which are binary or have the charset-collation latin1_swedish_ci,
InnoDB performs all comparisons internally, without resorting to the MySQL
comparison functions. This is to save CPU time.

InnoDB's own internal system tables have different precise types for their
columns, and for them the precise type is usually not used at all.
*/

#define DATA_ENGLISH    4       /* English language character string: this
                                is a relic from pre-MySQL time and only used
                                for InnoDB's own system tables */
#define DATA_ERROR      111     /* another relic from pre-MySQL time */

#define DATA_MYSQL_TYPE_MASK 255 /* AND with this mask to extract the MySQL
                                 type from the precise type */
#define DATA_MYSQL_TRUE_VARCHAR 15 /* MySQL type code for the >= 5.0.3
                                   format true VARCHAR */

/* Precise data types for system columns and the length of those columns;
NOTE: the values must run from 0 up in the order given! All codes must
be less than 256 */
#define DATA_ROW_ID     0       /* row id: a dulint */
#define DATA_ROW_ID_LEN 6       /* stored length for row id */

#define DATA_TRX_ID     1       /* transaction id: 6 bytes */
#define DATA_TRX_ID_LEN 6

#define DATA_ROLL_PTR   2       /* rollback data pointer: 7 bytes */
#define DATA_ROLL_PTR_LEN 7

#define DATA_N_SYS_COLS 3       /* number of system columns defined above */

/* Flags ORed to the precise data type */
#define DATA_NOT_NULL   256     /* this is ORed to the precise type when
                                the column is declared as NOT NULL */
#define DATA_UNSIGNED   512     /* this id ORed to the precise type when
                                we have an unsigned integer type */
#define DATA_BINARY_TYPE 1024   /* if the data type is a binary character
                                string, this is ORed to the precise type:
                                this only holds for tables created with
                                >= MySQL-4.0.14 */ 在int，float, double时，都是DATA_BINARY_TYPE的类型。
/* #define      DATA_NONLATIN1  2048 This is a relic from < 4.1.2 and < 5.0.1.
                                In earlier versions this was set for some
                                BLOB columns.
*/
#define DATA_LONG_TRUE_VARCHAR 4096     /* this is ORed to the precise data
                                type when the column is true VARCHAR where
                                MySQL uses 2 bytes to store the data len;
                                for shorter VARCHARs MySQL uses only 1 byte */
/*-------------------------------------------*/

/* This many bytes we need to store the type information affecting the
alphabetical order for a single field and decide the storage size of an
SQL null*/
#define DATA_ORDER_NULL_TYPE_BUF_SIZE           4
/* In the >= 4.1.x storage format we add 2 bytes more so that we can also
store the charset-collation number; one byte is left unused, though */
#define DATA_NEW_ORDER_NULL_TYPE_BUF_SIZE       6






/* Structure for an SQL data type.
If you add fields to this structure, be sure to initialize them everywhere.
This structure is initialized in the following functions:
dtype_set()
dtype_read_for_order_and_null_size()
dtype_new_read_for_order_and_null_size()
sym_tab_add_null_lit() */

struct dtype_struct{
        unsigned        mtype:8;        /* main data type */
        unsigned        prtype:24;      /* precise type; MySQL data
                                        type, charset code, flags to
                                        indicate nullability,
                                        signedness, whether this is a
                                        binary string, whether this is
                                        a true VARCHAR where MySQL
                                        uses 2 bytes to store the length */

        /* the remaining fields do not affect alphabetical ordering: */

        unsigned        len:16;         /* length; for MySQL data this
                                        is field->pack_length(),
                                        except that for a >= 5.0.3
                                        type true VARCHAR this is the
                                        maximum byte length of the
                                        string data (in addition to
                                        the string, MySQL uses 1 or 2
                                        bytes to store the string length) */

        unsigned        mbminlen:2;     /* minimum length of a
                                        character, in bytes */
        unsigned        mbmaxlen:3;     /* maximum length of a
                                        character, in bytes */
};

note：
1. prtype中，最低字节表示mysql的数据类型，第二字节表示DATA_NOT_NULL，DATA_UNSIGNED， DATA_BINARY_TYPE， DATA_LONG_TRUE_VARCHAR，最高字节存储字符集相关。





/* Structure for an SQL data field */
struct dfield_struct{
        void*           data;   /* pointer to data */
        ulint           len;    /* data length; UNIV_SQL_NULL if SQL null; */
        dtype_t         type;   /* type of data */
};

struct dtuple_struct {
        ulint           info_bits;      /* info bits of an index record:
                                        the default is 0; this field is used
                                        if an index record is built from
                                        a data tuple */
        ulint           n_fields;       /* number of fields in dtuple */
        ulint           n_fields_cmp;   /* number of fields which should
                                        be used in comparison services
                                        of rem0cmp.*; the index search
                                        is performed by comparing only these
                                        fields, others are ignored; the
                                        default value in dtuple creation is
                                        the same value as n_fields */
        dfield_t*       fields;         /* fields */
        UT_LIST_NODE_T(dtuple_t) tuple_list;
                                        /* data tuples can be linked into a
                                        list using this field */
        ulint           magic_n;
};
#define DATA_TUPLE_MAGIC_N      65478679

/* A slot for a field in a big rec vector */

typedef struct big_rec_field_struct     big_rec_field_t;
struct big_rec_field_struct {
        ulint           field_no;       /* field number in record */
        ulint           len;            /* stored data len */
        byte*           data;           /* stored data */
};

/* Storage format for overflow data in a big record, that is, a record
which needs external storage of data fields */

struct big_rec_struct {
        mem_heap_t*     heap;           /* memory heap from which allocated */
        ulint           n_fields;       /* number of stored fields */
        big_rec_field_t* fields;        /* stored fields */
};

note:
1. 从index中不是unique的field中，先把最大的field开始转换成big_rec_struct，直到整个dtuple的大小小于min(数据页/2,REC_MAX_DATA_SIZE).
2. 把field中大于DICT_MAX_INDEX_COL_LEN的数据复制到big_rec_struct中，同时在field中添加BTR_EXTERN_FIELD_REF_SIZE大小的外部信息。


