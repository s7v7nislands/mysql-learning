innodb page

include/page0page.h

#define PAGE_HEADER FSEG_PAGE_DATA             /* index page header starts at this offset */
/*-----------------------------*/
#define PAGE_N_DIR_SLOTS        0              /* number of slots in page directory */
#define PAGE_HEAP_TOP           2              /* pointer to record heap top */
#define PAGE_N_HEAP             4              /* number of records in the heap, bit 15=flag: new-style compact page format */
#define PAGE_FREE               6              /* pointer to start of page free record list */
#define PAGE_GARBAGE            8              /* number of bytes in deleted records */
#define PAGE_LAST_INSERT        10             /* pointer to the last inserted record, or NULL if this info has been reset by a delete, for example */
#define PAGE_DIRECTION          12             /* last insert direction: PAGE_LEFT, ... */
#define PAGE_N_DIRECTION        14             /* number of consecutive inserts to the same direction */
#define PAGE_N_RECS             16             /* number of user records on the page */
#define PAGE_MAX_TRX_ID         18             /* highest id of a trx which may have modified a record on the page; a dulint; defined only in secondary indexes; specifically, not in an ibuf tree; NOTE: this may be modified only when the thread has an x-latch to the page, and ALSO an x-latch to btr_search_latch if there is a hash index to the page! */
#define PAGE_HEADER_PRIV_END    26             /* end of private data structure of the page header which are set in a page create */
#define PAGE_LEVEL              26             /* level of the node in an index tree; the leaf level is the level 0 */
#define PAGE_INDEX_ID           28             /* index id where the page belongs */
#define PAGE_BTR_SEG_LEAF       36             /* file segment header for the leaf pages in a B-tree: defined only on the root page of a B-tree, but not in the root of an ibuf tree */
#define PAGE_BTR_IBUF_FREE_LIST         PAGE_BTR_SEG_LEAF
#define PAGE_BTR_IBUF_FREE_LIST_NODE    PAGE_BTR_SEG_LEAF           /* in the place of PAGE_BTR_SEG_LEAF and _TOP there is a free list base node if the page is the root page of an ibuf tree, and at the same place is the free list node if the page is in a free list */
#define PAGE_BTR_SEG_TOP                (36 + FSEG_HEADER_SIZE)     /* file segment header for the non-leaf pages in a B-tree: defined only on the root page of a B-tree, but not in the root of an ibuf tree */
/*----*/
#define PAGE_DATA   (PAGE_HEADER + 36 + 2 * FSEG_HEADER_SIZE)       /* start of data on the page */

#define PAGE_OLD_INFIMUM        (PAGE_DATA + 1 + REC_N_OLD_EXTRA_BYTES)             /* offset of the page infimum record on an old-style page */
#define PAGE_OLD_SUPREMUM       (PAGE_DATA + 2 + 2 * REC_N_OLD_EXTRA_BYTES + 8)     /* offset of the page supremum record on an old-style page */
#define PAGE_OLD_SUPREMUM_END   (PAGE_OLD_SUPREMUM + 9)                             /* offset of the page supremum record end on an old-style page */
#define PAGE_NEW_INFIMUM        (PAGE_DATA + REC_N_NEW_EXTRA_BYTES)                 /* offset of the page infimum record on a new-style compact page */
#define PAGE_NEW_SUPREMUM       (PAGE_DATA + 2 * REC_N_NEW_EXTRA_BYTES + 8)         /* offset of the page supremum record on a new-style compact page */
#define PAGE_NEW_SUPREMUM_END   (PAGE_NEW_SUPREMUM + 8)                             /* offset of the page supremum record end on a new-style compact page */
/*-----------------------------*/

/* Directions of cursor movement */
#define PAGE_LEFT           1
#define PAGE_RIGHT          2
#define PAGE_SAME_REC       3
#define PAGE_SAME_PAGE      4
#define PAGE_NO_DIRECTION   5

/*          PAGE DIRECTORY
            ==============
*/

typedef byte                page_dir_slot_t;
typedef page_dir_slot_t     page_dir_t;

/* Offset of the directory start down from the page end. We call the
slot with the highest file address directory start, as it points to
the first record in the list of records. */
#define PAGE_DIR            FIL_PAGE_DATA_END

/* We define a slot in the page directory as two bytes */
#define PAGE_DIR_SLOT_SIZE  2

/* The offset of the physically lower end of the directory, counted from page end, when the page is empty */
#define PAGE_EMPTY_DIR_START        (PAGE_DIR + 2 * PAGE_DIR_SLOT_SIZE)

/* The maximum and minimum number of records owned by a directory slot. The number may drop below the minimum in the first and the last slot in the directory. */
#define PAGE_DIR_SLOT_MAX_N_OWNED   8
#define PAGE_DIR_SLOT_MIN_N_OWNED   4


page/page0page.c

/*          THE INDEX PAGE
            ==============

The index page consists of a page header which contains the page's
id and other information. On top of it are the the index records
in a heap linked into a one way linear list according to alphabetic order.

Just below page end is an array of pointers which we call page directory,
to about every sixth record in the list. The pointers are placed in
the directory in the alphabetical order of the records pointed to,
enabling us to make binary search using the array. Each slot n:o I
in the directory points to a record, where a 4-bit field contains a count
of those records which are in the linear list between pointer I and
the pointer I - 1 in the directory, including the record
pointed to by pointer I and not including the record pointed to by I - 1.
We say that the record pointed to by slot I, or that slot I, owns
these records. The count is always kept in the range 4 to 8, with
the exception that it is 1 for the first slot, and 1--8 for the second slot.

An essentially binary search can be performed in the list of index
records, like we could do if we had pointer to every record in the
page directory. The data structure is, however, more efficient when
we are doing inserts, because most inserts are just pushed on a heap.
Only every 8th insert requires block move in the directory pointer
table, which itself is quite small. A record is deleted from the page
by just taking it off the linear list and updating the number of owned
records-field of the record which owns it, and updating the page directory,
if necessary. A special case is the one when the record owns itself.
Because the overhead of inserts is so small, we may also increase the
page size from the projected default of 8 kB to 64 kB without too
much loss of efficiency in inserts. Bigger page becomes actual
when the disk transfer rate compared to seek and latency time rises.
On the present system, the page size is set so that the page transfer
time (3 ms) is 20 % of the disk random access time (15 ms).

When the page is split, merged, or becomes full but contains deleted
records, we have to reorganize the page.

Assuming a page size of 8 kB, a typical index page of a secondary
index contains 300 index entries, and the size of the page directory
is 50 x 4 bytes = 200 bytes. */

