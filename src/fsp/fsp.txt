innodb fsp

fsp/fsp0fsp.c

#define FSP_HEADER_OFFSET   FIL_PAGE_DATA   /* Offset of the space header within a file page */

/* The data structures in files are defined just as byte strings in C */
typedef byte    fsp_header_t;
typedef byte    xdes_t;


/*          SPACE HEADER
            ============

File space header data structure: this data structure is contained in the
first page of a space. The space for this header is reserved in every extent
descriptor page, but used only in the first. */

/*-------------------------------------*/
#define FSP_SPACE_ID            0   /* space id */
#define FSP_NOT_USED            4   /* this field contained a value up to which we know that the modifications in the database have been flushed to the file space; not used now */
#define FSP_SIZE                8   /* Current size of the space in pages */
#define FSP_FREE_LIMIT          12  /* Minimum page number for which the free list has not been initialized: the pages >= this limit are, by definition, free; note that in a single-table tablespace where size < 64 pages, this number is 64, i.e., we have initialized the space about the first extent, but have not physically allocted those pages to the file */
#define FSP_LOWEST_NO_WRITE     16  /* The lowest page offset for which the page has not been written to disk (if it has been written, we know that the OS has really reserved the physical space for the page) */
#define FSP_FRAG_N_USED         20  /* number of used pages in the FSP_FREE_FRAG list */
#define FSP_FREE                24  /* list of free extents */
#define FSP_FREE_FRAG           (24 + FLST_BASE_NODE_SIZE)      /* list of partially free extents not belonging to any segment */
#define FSP_FULL_FRAG           (24 + 2 * FLST_BASE_NODE_SIZE)  /* list of full extents not belonging to any segment */
#define FSP_SEG_ID              (24 + 3 * FLST_BASE_NODE_SIZE)  /* 8 bytes which give the first unused segment id */
#define FSP_SEG_INODES_FULL     (32 + 3 * FLST_BASE_NODE_SIZE)  /* list of pages containing segment headers, where all the segment inode slots are reserved */
#define FSP_SEG_INODES_FREE     (32 + 4 * FLST_BASE_NODE_SIZE)  /* list of pages containing segment headers, where not all the segment header slots are reserved */
/*-------------------------------------*/

/* File space header size */
#define FSP_HEADER_SIZE     (32 + 5 * FLST_BASE_NODE_SIZE)

#define FSP_FREE_ADD        4   /* this many free extents are added to the free list from above FSP_FREE_LIMIT at a time */                    


/*          FILE SEGMENT INODE
            ==================

Segment inode which is created for each segment in a tablespace. NOTE: in
purge we assume that a segment having only one currently used page can be
freed in a few steps, so that the freeing cannot fill the file buffer with
bufferfixed file pages. */

typedef byte    fseg_inode_t;

#define FSEG_INODE_PAGE_NODE    FSEG_PAGE_DATA  /* the list node for linking segment inode pages */

#define FSEG_ARR_OFFSET     (FSEG_PAGE_DATA + FLST_NODE_SIZE)

/*-------------------------------------*/
#define FSEG_ID                 0   /* 8 bytes of segment id: if this is ut_dulint_zero, it means that the header is unused */
#define FSEG_NOT_FULL_N_USED    8   /* number of used segment pages in the FSEG_NOT_FULL list */
#define FSEG_FREE               12  /* list of free extents of this segment */
#define FSEG_NOT_FULL           (12 + FLST_BASE_NODE_SIZE)      /* list of partially free extents */
#define FSEG_FULL               (12 + 2 * FLST_BASE_NODE_SIZE)  /* list of full extents */
#define FSEG_MAGIC_N            (12 + 3 * FLST_BASE_NODE_SIZE)  /* magic number used in debugging */
#define FSEG_FRAG_ARR_N_SLOTS   (FSP_EXTENT_SIZE / 2)           /* number of slots in the array for the fragment pages */
#define FSEG_FRAG_ARR           (16 + 3 * FLST_BASE_NODE_SIZE)  /* array of individual pages belonging to this segment in fsp fragment extent lists */
#define FSEG_FRAG_SLOT_SIZE     4                               /* a fragment page slot contains its page number within space, FIL_NULL means that the slot is not in use */
/*-------------------------------------*/
#define FSEG_INODE_SIZE             (16 + 3 * FLST_BASE_NODE_SIZE + FSEG_FRAG_ARR_N_SLOTS * FSEG_FRAG_SLOT_SIZE)

#define FSP_SEG_INODES_PER_PAGE     ((UNIV_PAGE_SIZE - FSEG_ARR_OFFSET - 10) / FSEG_INODE_SIZE) /* Number of segment inodes which fit on a single page */

#define FSEG_MAGIC_N_VALUE      97937874

#define FSEG_FILLFACTOR         8                       /* If this value is x, then if the number of unused but reserved pages in a segment is less than reserved pages * 1/x, and there are at least FSEG_FRAG_LIMIT used pages, then we allow a new empty extent to be added to the segment in fseg_alloc_free_page. Otherwise, we use unused pages of the segment. */

#define FSEG_FRAG_LIMIT         FSEG_FRAG_ARR_N_SLOTS   /* If the segment has >= this many used pages, it may be expanded by allocating extents to the segment; until that only individual fragment pages are allocated from the space */

#define FSEG_FREE_LIST_LIMIT    40                      /* If the reserved size of a segment is at least this many extents, we allow extents to be put to the free list of the extent: at most FSEG_FREE_LIST_MAX_LEN many */
#define FSEG_FREE_LIST_MAX_LEN  4

note:
1. 当page用了只剩reserved page的1/FSEG_FILLFACTOR时，才可以从spcace申请extent
2. 当page超过FSEG_FRAG_LIMIT时，才可以申请整个extent
3. 当reserved超过FSEG_FREE_LIST_LIMIT个extent时，才可以加入到free list
4. segment free list最大的长度是FSEG_FREE_LIST_MAX_LEN

/*          EXTENT DESCRIPTOR
            =================

File extent descriptor data structure: contains bits to tell which pages in
the extent are free and which contain old tuple version to clean. */

/*-------------------------------------*/
#define XDES_ID             0       /* The identifier of the segment to which this extent belongs */
#define XDES_FLST_NODE      8       /* The list node data structure for the descriptors */
#define XDES_STATE          (FLST_NODE_SIZE + 8)    /* contains state information of the extent */
#define XDES_BITMAP         (FLST_NODE_SIZE + 12)   /* Descriptor bitmap of the pages in the extent */
/*-------------------------------------*/

#define XDES_FREE_BIT       0       /* Index of the bit which tells if the page is free */
#define XDES_CLEAN_BIT      1       /* NOTE: currently not used! Index of the bit which tells if there are old versions of tuples on the page */

#define XDES_BITS_PER_PAGE  2       /* How many bits are there per page */

/* States of a descriptor */
#define XDES_FREE           1   /* extent is in free list of space */
#define XDES_FREE_FRAG      2   /* extent is in free fragment list of space */
#define XDES_FULL_FRAG      3   /* extent is in full fragment list of space */
#define XDES_FSEG           4   /* extent belongs to a segment */

/* File extent data structure size in bytes. */
#define XDES_SIZE           (XDES_BITMAP + UT_BITS_IN_BYTES(FSP_EXTENT_SIZE * XDES_BITS_PER_PAGE))

/* Offset of the descriptor array on a descriptor page */
#define XDES_ARR_OFFSET     (FSP_HEADER_OFFSET + FSP_HEADER_SIZE)



include/fsp0fsp.h

/* Flags for fsp_reserve_free_extents */
#define FSP_NORMAL      1000000
#define FSP_UNDO        2000000
#define FSP_CLEANING    3000000

/* Number of pages described in a single descriptor page: currently each page
description takes less than 1 byte; a descriptor page is repeated every
this many file pages */
#define XDES_DESCRIBED_PER_PAGE     UNIV_PAGE_SIZE
/* #define XDES_DESCRIBED_PER_PAGE      UNIV_PAGE_SIZE */
/* This has been replaced with either UNIV_PAGE_SIZE or page_zip->size. */

/* The space low address page map */
/*--------------------------------------*/
/* The following two pages are repeated every XDES_DESCRIBED_PER_PAGE pages in every tablespace. */
#define FSP_XDES_OFFSET             0   /* extent descriptor */
#define FSP_IBUF_BITMAP_OFFSET      1   /* insert buffer bitmap */
/* The ibuf bitmap pages are the ones whose page number is the number above plus a multiple of XDES_DESCRIBED_PER_PAGE */

#define FSP_FIRST_INODE_PAGE_NO     2   /* in every tablespace */ 
  
/* The following pages exist in the system tablespace (space 0). */
#define FSP_IBUF_HEADER_PAGE_NO     3   /* in tablespace 0 */
#define FSP_IBUF_TREE_ROOT_PAGE_NO  4   /* in tablespace 0 */       
/* The ibuf tree root page number in tablespace 0; its fseg inode is on the page number FSP_FIRST_INODE_PAGE_NO */

#define FSP_TRX_SYS_PAGE_NO         5   /* in tablespace 0 */  include fseg, binlog, doublewrite.
#define FSP_FIRST_RSEG_PAGE_NO      6   /* in tablespace 0 */  // rollback segment inode, defined in page FSP_TRX_SYS_PAGE_NO. (TRX_SYS + TRX_SYS_RSEGS)
#define FSP_DICT_HDR_PAGE_NO        7   /* in tablespace 0 */  include directory
/*--------------------------------------*/


Notes:

    1. In system tablespace, the 0-7 pages is special. other tablespace just 0-2 pages.
    2. the fsp header only be used in 0th page in tablespace,  but repeated every XDES_DESCRIBED_PER_PAGE pages in every tablespace.
    3. extend descriptors are repeated every XDES_DESCRIBED_PER_PAGE pages in every tablespace.
    4. pages allacate from fragment extent or full extent.
    5. segment and extent are different, segment is used to manage data , and extent is used to manage pages in tablespace. 
    6. fseg_create()用于创建系统用的segment。	
	7. FSP_IBUF_HEADER_PAGE_NO，之所以要使用单独的一页，是因为避免加锁。
	8. 要注意page分配的不同方式。

   







    
