/*
        IMPLEMENTATION OF THREAD LOCAL STORAGE
        ======================================                                                                                      

The threads sometimes need private data which depends on the thread id.
This is implemented as a hash table, where the hash value is calculated
from the thread id, to prepare for a large number of threads. The hash table
is protected by a mutex. If you need modify the program and put new data to
the thread local storage, just add it to struct thr_local_struct in the                                                             
header file. */

/* Mutex protecting the local storage hash table */
mutex_t thr_local_mutex;      

/* The hash table. The module is not yet initialized when it is NULL. */                                                            
hash_table_t*   thr_local_hash  = NULL;                                                                                             

/* The private data for each thread should be put to
the structure below and the accessor functions written                                                                              
for the field. */             
typedef struct thr_local_struct thr_local_t;                                                                                        

struct thr_local_struct{
        os_thread_id_t  id;     /* id of the thread which owns this struct */
        os_thread_t     handle; /* operating system handle to the thread */
        ulint           slot_no;/* the index of the slot in the thread table
                                for this thread */     
        ibool           in_ibuf;/* TRUE if the the thread is doing an ibuf
                                operation */
        hash_node_t     hash;   /* hash chain node */  
        ulint           magic_n;
};

#define THR_LOCAL_MAGIC_N       1231234


note：
1. 定义了线程局部变量的使用。

